[
    [
        "mapLinkedData() {",
        "if (!this.tail || !this.head) return this.table = [];",
        "let current = this.head;",
        "let data: Rows[] = [];",
        "for (let i = 0; i < this.length; i++) {",
        "if (current.next === null) { break; }",
        "data[i] = current.value!;",
        "current = current.next",
        "}",
        "data[this.length - 1] = current.value!;",
        "this.table = data;",
        "return data;",
        "}"
    ],
    [
        "reorderList(): void {",
        "this.action = 'Sorted'",
        "let start = performance.now();",
        "const array = this.table;",
        "if (this.sortedState === SortedState.ALPHABET) this.sortedState = SortedState.NUMERICAL",
        "else this.sortedState = SortedState.ALPHABET",
        "this.listService.clearList();",
        "for (let i = 0; i < array.length; i++) {",
        "this.insert(array[i])",
        "}",
        "this.setListState()",
        "this.benchmark = performance.now() - start;",
        "return;",
        "}"
    ],
    [
        "public sort() {",
        "const count: number[] = [];",
        "const output: number[] = [];",
        "const max = Math.max(...this.array);",
        "for (let i = 0; i < max + 1; i++) {",
        "count[i] = 0;",
        "}",
        "for (let i = 0; i < this.array.length; i++) {",
        "output[i] = 0;",
        "}",
        "for (let i = 0; i < this.array.length; i++) {",
        "count[this.array[i]]++",
        "}",
        "for (let i = 1; i < count.length; i++) {",
        "count[i] = count[i] + count[i - 1];",
        "}",
        "for (let i = this.array.length - 1; i >= 0; i--) {",
        "output[--count[this.array[i]]] = this.array[i];",
        "}",
        "return output",
        "}"
    ],
    [
        "public indexOf(item: number): number {",
        "if (!this.isSorted(this.array)) {",
        "const sort = new BucketSort(this.array);",
        "this.array = sort.sort();",
        "}",
        "let count = 0;",
        "let start = 0;",
        "let end = this.array.length;",
        " while (count < (this.findLogTwo(this.array.length) + 1)) {",
        "count++",
        "let middle = Math.floor((start + end) / 2);",
        "if (item === this.array[middle]) return middle;",
        "item > this.array[middle] ? start = middle++ : end = middle--",
        "}",
        "return -1",
        "}"
    ],
    [
        "const findIndex = (searchValue: number | string | boolean): number | null => {",
        "let currentNode: Node | DoubleNode | null = head",
        "let count: number = 0;",
        "for (let i = 0; i < length + 1; i++) {",
        "if (!currentNode?.next) return null",
        "currentNode = currentNode!.next;",
        "count++",
        "if (currentNode?.value === searchValue) {",
        "break;",
        "}",
        "}",
        "return count",
        "}"
    ]
]